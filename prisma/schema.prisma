datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    previewFeatures = ["driverAdapters"]
    provider        = "prisma-client-js"
}

model User {
    id           String    @id @default(uuid())
    firstName    String
    lastName     String
    email        String    @unique
    passwordHash String
    tasks        Task[]
    labels       Label[]
    sessions     Session[]
    projects     Project[]
    createdAt    DateTime? @default(now())
    updatedAt    DateTime? @updatedAt
}

model Session {
    id        String    @id @default(uuid())
    validity  DateTime
    userId    String
    user      User      @relation(fields: [userId], references: [id])
    createdAt DateTime? @default(now())
    updatedAt DateTime? @updatedAt
}

model Task {
    id          String        @id @default(uuid())
    title       String
    completed   Boolean       @default(false)
    dueDate     DateTime?
    priority    Priority?
    userId      String
    user        User          @relation(fields: [userId], references: [id])
    labelIds    String[]
    projectId   String?
    project     Project?      @relation(fields: [projectId], references: [id], onDelete: Cascade)
    createdAt   DateTime?     @default(now())
    updatedAt   DateTime?     @updatedAt
    labelOnTask LabelOnTask[]
}

enum Priority {
    HIGH
    MEDIUM
    LOW
}

model Label {
    id          String        @id @default(uuid())
    name        String
    userId      String
    user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
    taskIds     String[]
    createdAt   DateTime?     @default(now())
    updatedAt   DateTime?     @updatedAt
    labelOnTask LabelOnTask[]
}

model LabelOnTask {
    label   Label  @relation(fields: [labelId], references: [id], onDelete: Cascade)
    labelId String
    task    Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)
    taskId  String

    @@id([labelId, taskId])
}

model Project {
    id        String    @id @default(uuid())
    name      String
    userId    String
    user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
    tasks     Task[]
    createdAt DateTime? @default(now())
    updatedAt DateTime? @updatedAt
}
